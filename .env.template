# ============================================================================
# Agglayer Bridge Test Suite - Environment Configuration
# ============================================================================
# Copy this file to .env and fill in your actual values
# Command: cp .env.template .env

# ============================================================================
# ⚠️  REQUIRED CONFIGURATION
# ============================================================================
# These variables MUST be set for the test suite to work

# Private key for the test wallet (should have funds on all test chains)
# WARNING: Never commit your actual private key to version control!
# WARNING: Use a dedicated test wallet, not your main wallet!
TEST_WALLET_PRIVATE_KEY=0x0000000000000000000000000000000000000000000000000000000000000000

# ============================================================================
# ✅ OPTIONAL: RPC Endpoints
# ============================================================================
# The SDK uses default public RPCs, but you can override them here
# for better reliability or rate limits

# Ethereum Mainnet RPC
# ETHEREUM_RPC=https://mainnet.gateway.tenderly.co/YOUR_KEY
# ETHEREUM_RPC=https://eth-mainnet.g.alchemy.com/v2/YOUR_KEY

# Base RPC
# BASE_RPC=https://base.gateway.tenderly.co/YOUR_KEY
# BASE_RPC=https://base-mainnet.g.alchemy.com/v2/YOUR_KEY

# Katana RPC
# KATANA_RPC=https://katana.gateway.tenderly.co/YOUR_KEY

# OKX X Layer RPC (default: https://rpc.xlayer.tech)
# OKX_RPC=https://rpc.xlayer.tech

# ============================================================================
# ✅ OPTIONAL: Bridge Contract Addresses
# ============================================================================
# The SDK chain registry provides default bridge addresses
# Only override these if you're testing custom bridge contracts

# Ethereum Bridge Address (default: 0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe)
# ETHEREUM_BRIDGE_ADDRESS=0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe

# Base Bridge Address (default: 0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe)
# BASE_BRIDGE_ADDRESS=0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe

# Katana Bridge Address (default: 0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe)
# KATANA_BRIDGE_ADDRESS=0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe

# OKX Bridge Address (default: 0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe)
# OKX_BRIDGE_ADDRESS=0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe

# ============================================================================
# ✅ OPTIONAL: Custom Token Addresses
# ============================================================================
# Set after deploying custom ERC20 token using npm run deploy:custom-token
# Note: Wrapped versions are auto-discovered via SDK token mappings API

# Custom token on Katana (origin chain)
# CUSTOM_TOKEN_KATANA=0x5F50C8Ed23c0ebb338CC9B0DDf054420cB768C3A

# Custom token on Base (wrapped version - auto-discovered via SDK)
# CUSTOM_TOKEN_BASE=0x...

# Custom token on Ethereum (wrapped version - auto-discovered via SDK)
# CUSTOM_TOKEN_ETHEREUM=0x...

# ============================================================================
# ✅ OPTIONAL: Test Configuration
# ============================================================================
# Customize test amounts and behavior (defaults are defined in code)

# Test amounts (in token units, not wei) - VERY SMALL for live testing
# Defaults: ETH=0.0001, WBTC=0.000001, OKB=0.001, CUSTOM=1
# TEST_ETH_AMOUNT=0.0001
# TEST_WBTC_AMOUNT=0.000001
# TEST_OKB_AMOUNT=0.001
# TEST_CUSTOM_AMOUNT=1

# Dry run mode - set to true to simulate without executing real transactions
# DRY_RUN=false

# Slippage tolerance for bridges (percentage, default: 0.5)
# SLIPPAGE=0.5

# Gas price multiplier (e.g., 1.2 = 20% buffer, default: 1.0)
# GAS_MULTIPLIER=1.2

# ============================================================================
# ✅ OPTIONAL: API Configuration
# ============================================================================
# The SDK provides sensible defaults for all API settings

# ARC API base URL (default: https://arc-api.polygon.technology)
# ARC_API_BASE_URL=https://arc-api.polygon.technology

# API timeout in milliseconds (default: 60000)
# ARC_API_TIMEOUT=60000

# API key if required (usually not needed)
# AGGLAYER_API_KEY=your_api_key_here

# ============================================================================
# ✅ OPTIONAL: Debugging and Logging
# ============================================================================
# Control logging output (defaults provided)

# Debug mode (enables verbose SDK logging, default: off)
# DEBUG=agglayer:*

# Log level: error, warn, info, debug (default: info)
# LOG_LEVEL=info

# Save test results to JSON file (default: true)
# SAVE_TEST_RESULTS=true

# ============================================================================
# REQUIRED BALANCES FOR TESTING
# ============================================================================
# Ensure your test wallet has sufficient balances on each chain:
#
# Ethereum Mainnet:
#   - 0.1+ ETH (for gas and testing)
#   - 0.01+ WBTC (for bridge tests)
#
# Base:
#   - 0.1+ ETH (for gas and testing)
#   - 0.01+ WBTC (for bridge tests)
#   - Custom ERC20 tokens (if deployed)
#
# Katana:
#   - 0.1+ ETH (for gas and testing)
#   - Other tokens will be received via bridge
#
# OKX:
#   - 0.1+ ETH (for gas and testing)
#   - 10+ OKB (for bridge tests)
#   - Other tokens will be received via bridge
#
# Use npm run check:balances to verify your balances

# ============================================================================
# SETUP CHECKLIST
# ============================================================================
# Follow these steps to set up the test suite:
#
# 1. ✅ Install dependencies:
#    npm install
#
# 2. ✅ Copy this template to .env:
#    cp .env.template .env
#
# 3. ✅ Fill in required values:
#    - TEST_WALLET_PRIVATE_KEY
#
# 4. ✅ Fund your test wallet:
#    - Send ETH to all 4 chains
#    - Send WBTC to Ethereum and Base
#    - Send OKB to OKX chain
#    - Check balances: npm run check:balances
#
# 5. ✅ (Optional) Deploy custom token:
#    npm run deploy:custom-token:base
#
# 6. ✅ Run tests in dry-run mode first:
#    npm run test:dry-run
#
# 7. ✅ Run actual tests:
#    npm test
#
# ============================================================================
# SECURITY REMINDERS
# ============================================================================
# - NEVER commit your .env file to version control
# - NEVER share your private keys
# - Use a dedicated test wallet with limited funds
# - Keep your API keys secret
# - The .gitignore file should include .env
#
# ============================================================================
